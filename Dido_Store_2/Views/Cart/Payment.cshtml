@model Model.EF.Order
@{
    ViewBag.Title = "Payment";
    var cartList = (List<Dido_Store_2.Models.CartItem>)ViewBag.cartList;
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h2>Danh sách sản phẩm</h2>
<hr>
<div class="section group">
    <table id="tblGioHang" class="table table-hover">
        @if(cartList.Count > 0)
        {
            <thead>
                <tr style="font-weight:bold; font-size:1.3em">
                    <th>Mã</th>
                    <th>Tên</th>
                    <th>Ảnh</th>
                    <th>Giá</th>
                    <th>Số lượng</th>
                    <th>Thành tiền</th>
                </tr>
            </thead>
            <tbody id="dsGioHang">
                @foreach(var item in cartList)
                {
                    <tr id="line_@item.Product.ID">
                        <td>@item.Product.ID</td>
                        <td>@item.Product.Name</td>
                        <td><img src="@item.Product.Image" width="100" alt="Alternate Text" /></td>
                        <td class="text-danger">
                            @if(item.Product.PromotionPrice.HasValue)
                            {
                                @item.Product.PromotionPrice.GetValueOrDefault(0).ToString("N0")<u>đ</u>
                            }
                            else
                            {
                                @item.Product.Price.GetValueOrDefault(0).ToString("N0")<u>đ</u>
                            }

                        </td>
                        <td>@item.Quantity</td>
                        <td>

                            @if(item.Product.PromotionPrice.HasValue)
                            {
                                @((item.Product.PromotionPrice.GetValueOrDefault(0) * item.Quantity).ToString("N0"))<u>đ</u>
                            }
                            else
                            {
                                @((item.Product.Price.GetValueOrDefault(0) * item.Quantity).ToString("N0"))<u>đ</u>
                            }

                        </td>
                    </tr>
                }
                <tr>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td><h3>Tổng tiền: </h3></td>
                    <td><h3>@cartList.Sum(x => x.Product.PromotionPrice.HasValue ? x.Product.PromotionPrice * x.Quantity : x.Product.Price * x.Quantity).Value.ToString("N0")<u>đ</u></h3></td>
                </tr>
            </tbody>
        }
    </table>
</div>


<h2>Thông tin người nhận</h2>
<hr>
<div class="section group">
    <div class="col-md-offset-3 col-md-6">
        @using(Html.BeginForm("Payment", "Cart", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                <div class="form-group">
                    @Html.LabelFor(model => model.ShipName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ShipName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ShipName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ShipMobile, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ShipMobile, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ShipMobile, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ShipAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ShipAddress, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ShipAddress, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ShipEmail, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ShipEmail, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ShipEmail, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }

        <div>
            @Html.ActionLink("Quay lại", "Index")
        </div>
    </div>
</div>